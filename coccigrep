#!/usr/bin/python
# Copyright (C) 2011 Eric Leblond <eric@regit.org>
#
# You can copy, redistribute or modify this Program under the terms of
# the GNU General Public License version 3 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# version 3 along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import argparse
from coccigrep import CocciGrep

coccigrep = CocciGrep()
operations = coccigrep.get_operations()

parser = argparse.ArgumentParser(prog='coccigrep', description='Semantic grep based on coccinelle')
parser.add_argument('-t', '--type', default=None, help='C type where looking for')
parser.add_argument('-a', '--attribut', default=None, help='C attribut that is set')
parser.add_argument('-o', '--operation', default='used', help='Operation on structure', choices=operations)
parser.add_argument('-s', '--sp', default=None, help='Semantic patch to use')
parser.add_argument('-A', '--after-context', dest='after', type=int, default=0, help='Number of line after context')
parser.add_argument('-B', '--before-context', dest='before', type=int, default=0, help='Number of line before context')
parser.add_argument('-C', '--concurrency', dest='ncpus', type=int, default=1, help='Number of cpus to use')
parser.add_argument('-c', '--color', action='store_const', const=True, help='colorize output (need pigments)')
parser.add_argument('-V', '--vim', action='store_const', const=True, help='vim output')
parser.add_argument('-f', '--output-format', dest='oformat', default='term', help='colorize format for output', choices=['term', 'html'])
parser.add_argument('-v', '--verbose', action='store_const', const=True, help='verbose output (including coccinelle error)')
parser.add_argument('file', metavar='file', nargs='+', help='List of files')
parser.add_argument('--version', action='version', version='%(prog)s 0.7')

args = parser.parse_args()

if args.attribut != None and args.operation == 'used':
    args.operation = 'deref'

if args.verbose:
    coccigrep.set_verbose()

if args.sp != None:
    coccigrep.add_operations([args.sp])
    args.operation = coccigrep.get_operation_name(args.sp)

if args.ncpus > 1:
    coccigrep.set_concurrency(args.ncpus)

coccigrep.setup(args.type, args.attribut, args.operation)
coccigrep.run(args.file)

if args.vim:
    output = coccigrep.display(mode='vim', before=args.before, after=args.after)
elif args.color:
    output = coccigrep.display(mode='color', oformat=args.oformat, before=args.before, after=args.after)
else:
    output = coccigrep.display(mode='raw', before=args.before, after=args.after)

print output
